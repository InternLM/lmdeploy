name: benchmark_test

on:
  workflow_dispatch:
    inputs:
      repo_org:
        required: false
        description: 'Tested repository organization name. Default is InternLM'
        type: string
        default: 'InternLM/lmdeploy'
      repo_ref:
        required: false
        description: 'Set branch or tag or commit id. Default is "main"'
        type: string
        default: 'main'
      benchmark_type:
        required: true
        description: 'Set benchmark type. Default is "["generation", "throughtput", "api_server"]"'
        type: string
        default: "['generation', 'throughput', 'api_server']"
      backend:
        required: true
        description: 'Set backend testcase filter: turbomind or pytorch or turbomind, pytorch. Default is "["turbomind", "pytorch"]"'
        type: string
        default: "['turbomind', 'pytorch']"
      offline_mode:
        required: true
        description: 'Whether start a offline mode, if true, you should prepare code and whl package by yourself'
        type: boolean
        default: false
      dependency_pkgs:
        required: true
        description: 'Dependency packages, you can also set a specific version'
        type: string
        default: 'packaging transformers_stream_generator transformers datasets matplotlib jmespath'
      default_tp:
        required: true
        description: 'Default tp value'
        type: string
        default: '--tp 1'
      log_level:
        required: true
        description: 'Default ERROR, can also set INFO'
        type: string
        default: 'ERROR'
      kvint_quantization:
        required: true
        description: 'Default kvint4, kvint8'
        type: string
        default: "['kvint4','kvint8']"
      models:
        required: true
        description: 'Set models run benchmark'
        type: string
        default: "['internlm/internlm2-chat-20b','internlm/internlm2-chat-20b-inner-4bits','internlm/internlm2_5-7b-chat','internlm/internlm2_5-7b-chat-inner-4bits','meta-llama/Llama-2-7b-chat-hf','meta-llama/Llama-2-7b-chat-hf-inner-4bits','meta-llama/Meta-Llama-3-8B-Instruct','meta-llama/Meta-Llama-3-8B-Instruct-inner-4bits','Qwen/Qwen2-72B-Instruct']"

env:
  HOST_PIP_CACHE_DIR: /nvme/github-actions/pip-cache
  HOST_LOCALTIME: /usr/share/zoneinfo/Asia/Shanghai
  OUTPUT_FOLDER: cuda11.8_dist_${{ github.run_id }}
  REPORT_DIR: /nvme/qa_test_models/benchmark-reports/${{ github.run_id }}
  DATASET_FILE: /nvme/qa_test_models/datasets/ShareGPT_V3_unfiltered_cleaned_split.json
  TP_INFO: --tp 1
  LOOP_NUM: 1
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
  dependency_pkgs: ${{inputs.dependency_pkgs || 'packaging transformers_stream_generator transformers datasets matplotlib jmespath'}}

jobs:
  linux-build:
    if: ${{github.event_name == 'schedule' || (!cancelled() && !inputs.offline_mode)}}
    strategy:
      matrix:
        pyver: [py310]
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: ${{ matrix.pyver }}
      PLAT_NAME: manylinux2014_x86_64
      DOCKER_TAG: cuda11.8
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repo_org || 'InternLM/lmdeploy' }}
          ref: ${{github.event.inputs.repo_ref || 'main'}}
      - name: Build
        run: |
          echo ${PYTHON_VERSION}
          echo ${PLAT_NAME}
          echo ${DOCKER_TAG}
          echo ${OUTPUT_FOLDER}
          echo ${GITHUB_RUN_ID}
          # remove -it
          sed -i 's/docker run --rm -it/docker run --rm/g' builder/manywheel/build_wheel.sh
          bash builder/manywheel/build_wheel.sh ${PYTHON_VERSION} ${PLAT_NAME} ${DOCKER_TAG} ${OUTPUT_FOLDER}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          path: builder/manywheel/${{ env.OUTPUT_FOLDER }}
          retention-days: 1
          name: my-artifact-${{ github.run_id }}-${{ matrix.pyver }}


  generation_benchmark:
    needs: linux-build
    if: ${{github.event_name == 'schedule' || (!cancelled() && contains(fromJSON(github.event.inputs.benchmark_type), 'generation'))}}
    runs-on: [self-hosted, linux-a100]
    strategy:
      fail-fast: false
      matrix:
        model: ${{fromJSON(github.event.inputs.models)}}
    timeout-minutes: 120
    env:
      MODEL_PATH: /nvme/qa_test_models/${{matrix.model}}
      CUDA_VISIBLE_DEVICES: 6,7
    container:
      image: nvcr.io/nvidia/tritonserver:24.03-py3
      options: "--gpus=all --ipc=host --user root -e PIP_CACHE_DIR=/root/.cache/pip --pull never"
      volumes:
        - /nvme/github-actions/pip-cache:/root/.cache/pip
        - /nvme/github-actions/packages:/root/packages
        - /nvme/qa_test_models:/nvme/qa_test_models
        - /mnt/shared:/mnt/shared
        - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        if: ${{github.event_name == 'schedule' || !inputs.offline_mode}}
        with:
          repository: ${{ github.event.inputs.repo_org || 'InternLM/lmdeploy' }}
          ref: ${{github.event.inputs.repo_ref || 'main'}}
      - name: Copy repository - offline
        if: ${{inputs.offline_mode}}
        run: cp -r /nvme/qa_test_models/offline_pkg/lmdeploy/. .
      - name: Download Artifacts
        if: ${{github.event_name == 'schedule' || !inputs.offline_mode}}
        uses: actions/download-artifact@v4
        with:
          name: my-artifact-${{ github.run_id }}-py310
      - name: Install pytorch
        run: |
          python3 -m pip cache dir
          python3 -m pip install torch==2.2.2 torchvision==0.17.2 --index-url https://download.pytorch.org/whl/cu118
      - name: Install lmdeploy - dependency
        run: |
          # manually install flash attn
          # the install packeage from. https://github.com/Dao-AILab/flash-attention/releases
          python3 -m pip install /root/packages/flash_attn-2.5.7+cu118torch2.2cxx11abiFALSE-cp310-cp310-linux_x86_64.whl
          python3 -m pip install -U 'xformers<=0.0.26' --index-url https://download.pytorch.org/whl/cu118
          python3 -m pip install ${{env.dependency_pkgs}}
      - name: Install lmdeploy
        if: ${{github.event_name == 'schedule' || !inputs.offline_mode}}
        run: |
          python3 -m pip install lmdeploy-*.whl
          python3 -m pip install triton==2.1.0
          python3 -m pip install -r requirements/test.txt
      - name: Install lmdeploy - offline
        if: ${{inputs.offline_mode}}
        run: |
          python3 -m pip install /nvme/qa_test_models/offline_pkg/py310/lmdeploy-*.whl
          python3 -m pip install triton==2.1.0
          python3 -m pip install -r requirements/test.txt
      - name: Check env
        run: |
          python3 -m pip list
          lmdeploy check_env
      - name: Set params
        run: |
          chmod +x .github/scripts/set_benchmark_param.sh
          .github/scripts/set_benchmark_param.sh ${{matrix.model}}
      - name: Run generation benchmark
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind')
        env:
          result_dir: benchmark-generation-turbomind
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          python3 benchmark/profile_generation.py $MODEL_PATH $MAX_ENTRY_COUNT $MODEL_FORMAT $TP_INFO -c 8 256 -ct 128 128 2048 128 -pt 1 128 128 2048 --csv ${result_dir}/generation.csv > ${result_dir}/generation.log
      - name: Run generation benchmark - longtext turbomind
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind') && contains(env.LONGTEXT_BENCHMARK, 'true')
        env:
          result_dir: benchmark-generation-longtext-turbomind
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          python3 benchmark/profile_generation.py $MODEL_PATH $MODEL_FORMAT $TP_INFO --rope-scaling-factor 1.0 -c 1 --session-len 200000 -ct 1024 -pt 198000 --csv ${result_dir}/generation_longtext.csv > ${result_dir}/generation_longtext.log
      - name: Run generation benchmark - pytorch
        if: (!contains(env.MODEL_FORMAT, 'awq') && contains(fromJSON(github.event.inputs.backend), 'pytorch'))
        env:
          result_dir: benchmark-generation-pytorch
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          python3 benchmark/profile_generation.py $MODEL_PATH $TP_INFO --backend pytorch -c 8 256 -ct 128 128 2048 128 -pt 1 128 128 2048 --csv ${result_dir}/generation.csv > ${result_dir}/generation.log
      - name: Run generation benchmark - longtext pytorch
        if: (!contains(env.MODEL_FORMAT, 'awq') && contains(fromJSON(github.event.inputs.backend), 'pytorch') && contains(env.LONGTEXT_BENCHMARK, 'true'))
        env:
          result_dir: benchmark-generation-longtext-pytorch
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          python3 benchmark/profile_generation.py $MODEL_PATH $MODEL_FORMAT $TP_INFO --backend pytorch -c 1 --session-len 200000 -ct 1024 -pt 198000 --csv ${result_dir}/generation_longtext.csv > ${result_dir}/generation_longtext.log
      - name: Save reports
        if: always()
        run: |
          mkdir $REPORT_DIR -p && mkdir $REPORT_DIR/${{matrix.model}} -p && mkdir $REPORT_DIR/${{matrix.model}}/generation -p
          cp -r benchmark-generation-* $REPORT_DIR/${{matrix.model}}/generation && rm -rf benchmark-generation-*
          chmod -R 777 $REPORT_DIR
          echo 'save report to $REPORT_DIR/${{matrix.model}}/generation'
      - name: Clear workfile
        if: always()
        run: |
          export workdir=$(pwd)
          cd ..
          rm -rf $workdir
          mkdir $workdir
          chmod -R 777 $workdir


  throughput_benchmark:
    needs: linux-build
    if: ${{github.event_name == 'schedule' || (!cancelled() && contains(fromJSON(github.event.inputs.benchmark_type), 'throughput'))}}
    runs-on: [self-hosted, linux-a100-2]
    strategy:
      fail-fast: false
      matrix:
        model: ${{fromJSON(github.event.inputs.models)}}
    timeout-minutes: 240
    env:
      MODEL_PATH: /nvme/qa_test_models/${{matrix.model}}
      CUDA_VISIBLE_DEVICES: 4,5
    container:
      image: nvcr.io/nvidia/tritonserver:24.03-py3
      options: "--gpus=all --ipc=host --user root -e PIP_CACHE_DIR=/root/.cache/pip --pull never"
      volumes:
        - /nvme/github-actions/pip-cache:/root/.cache/pip
        - /nvme/github-actions/packages:/root/packages
        - /nvme/qa_test_models:/nvme/qa_test_models
        - /nvme/qa_test_models/datasets/:/nvme/qa_test_models/datasets/
        - /mnt/shared:/mnt/shared
        - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        if: ${{github.event_name == 'schedule' || !inputs.offline_mode}}
        with:
          repository: ${{ github.event.inputs.repo_org || 'InternLM/lmdeploy' }}
          ref: ${{github.event.inputs.repo_ref || 'main'}}
      - name: Copy repository - offline
        if: ${{inputs.offline_mode}}
        run: cp -r /nvme/qa_test_models/offline_pkg/lmdeploy/. .
      - name: Download Artifacts
        if: ${{github.event_name == 'schedule' || !inputs.offline_mode}}
        uses: actions/download-artifact@v4
        with:
          name: my-artifact-${{ github.run_id }}-py310
      - name: Install pytorch
        run: |
          python3 -m pip cache dir
          python3 -m pip install torch==2.2.2 torchvision==0.17.2 --index-url https://download.pytorch.org/whl/cu118
      - name: Install lmdeploy - dependency
        run: |
          # manually install flash attn
          # the install packeage from. https://github.com/Dao-AILab/flash-attention/releases
          python3 -m pip install /root/packages/flash_attn-2.5.7+cu118torch2.2cxx11abiFALSE-cp310-cp310-linux_x86_64.whl
          python3 -m pip install -U 'xformers<=0.0.26' --index-url https://download.pytorch.org/whl/cu118
          python3 -m pip install ${{env.dependency_pkgs}}
      - name: Install lmdeploy
        if: ${{github.event_name == 'schedule' || !inputs.offline_mode}}
        run: |
          python3 -m pip install lmdeploy-*.whl
          python3 -m pip install triton==2.1.0
          python3 -m pip install -r requirements/test.txt
      - name: Install lmdeploy - offline
        if: ${{inputs.offline_mode}}
        run: |
          python3 -m pip install /nvme/qa_test_models/offline_pkg/py310/lmdeploy-*.whl
          python3 -m pip install triton==2.1.0
          python3 -m pip install -r requirements/test.txt
      - name: Check env
        run: |
          python3 -m pip list
          lmdeploy check_env
      - name: Set params
        run: |
          chmod +x .github/scripts/set_benchmark_param.sh
          .github/scripts/set_benchmark_param.sh ${{matrix.model}}
      - name: Run throughput benchmark
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind')
        env:
          result_dir: benchmark-throughput-turbomind
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          batches=($BATCHES)
          for batch in ${batches[@]}
          do
            for ((i=1; i<=$LOOP_NUM; i++))
              do
                python3 benchmark/profile_throughput.py $DATASET_FILE $MODEL_PATH $MAX_ENTRY_COUNT $MODEL_FORMAT $TP_INFO --concurrency "$batch" --num-prompts 3000 --csv ${result_dir}/throughput_csv_batch_"${batch}"_"${i}"th.csv &> ${result_dir}/throughput_batch_"${batch}"_"${i}"th.log
              done
          done
      - name: Run throughput benchmark - kvint8
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind') && contains(fromJSON(github.event.inputs.kvint_quantization), 'kvint8')
        env:
          result_dir: benchmark-throughput-turbomind-kvint8
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          batches=($BATCHES)
          for batch in ${batches[@]}
          do
            for ((i=1; i<=$LOOP_NUM; i++))
              do
                python3 benchmark/profile_throughput.py $DATASET_FILE $MODEL_PATH $MAX_ENTRY_COUNT $MODEL_FORMAT $TP_INFO --concurrency "$batch" --num-prompts 3000 --quant-policy 8 --csv ${result_dir}/throughput_csv_batch_"${batch}"_"${i}"th.csv &> ${result_dir}/throughput_batch_"${batch}"_"${i}"th.log
              done
          done
      - name: Run throughput benchmark - kvint4
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind') && contains(fromJSON(github.event.inputs.kvint_quantization), 'kvint4')
        env:
          result_dir: benchmark-throughput-turbomind-kvint4
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          batches=($BATCHES)
          for batch in ${batches[@]}
          do
            for ((i=1; i<=$LOOP_NUM; i++))
              do
                python3 benchmark/profile_throughput.py $DATASET_FILE $MODEL_PATH $MAX_ENTRY_COUNT $MODEL_FORMAT $TP_INFO --concurrency "$batch" --num-prompts 3000 --quant-policy 4 --csv ${result_dir}/throughput_csv_batch_"${batch}"_"${i}"th.csv &> ${result_dir}/throughput_batch_"${batch}"_"${i}"th.log
              done
          done
      - name: Run throughput benchmark - pytorch
        if: (!contains(env.MODEL_FORMAT, 'awq') && contains(fromJSON(github.event.inputs.backend), 'pytorch'))
        env:
          result_dir: benchmark-throughput-pytorch
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          batches=($BATCHES)
          for batch in ${batches[@]}
          do
            for ((i=1; i<=$LOOP_NUM; i++))
              do
                python3 benchmark/profile_throughput.py $DATASET_FILE $MODEL_PATH $MAX_ENTRY_COUNT $MODEL_FORMAT $TP_INFO --backend pytorch --concurrency "$batch" --num-prompts 3000 --csv ${result_dir}/throughput_csv_batch_"${batch}"_"${i}"th.csv &> ${result_dir}/throughput_batch_"${batch}"_"${i}"th.log
              done
          done
      - name: Save reports
        if: always()
        run: |
          mkdir $REPORT_DIR -p && mkdir $REPORT_DIR/${{matrix.model}} -p && mkdir $REPORT_DIR/${{matrix.model}}/throughput -p
          cp -r benchmark-throughput-* $REPORT_DIR/${{matrix.model}}/throughput && rm -rf benchmark-throughput-*
          chmod -R 777 $REPORT_DIR
          echo 'save report to $REPORT_DIR/${{matrix.model}}/throughput'
      - name: Clear workfile
        if: always()
        run: |
          export workdir=$(pwd)
          cd ..
          rm -rf $workdir
          mkdir $workdir
          chmod -R 777 $workdir


  restful_benchmark:
    needs: linux-build
    if: ${{github.event_name == 'schedule' || (!cancelled() && contains(fromJSON(github.event.inputs.benchmark_type), 'api_server'))}}
    runs-on: [self-hosted, linux-a100]
    strategy:
      fail-fast: false
      matrix:
        model: ${{fromJSON(github.event.inputs.models)}}
    timeout-minutes: 240
    env:
      MODEL_PATH: /nvme/qa_test_models/${{matrix.model}}
      CUDA_VISIBLE_DEVICES: 6,7
    container:
      image: nvcr.io/nvidia/tritonserver:24.03-py3
      options: "--gpus=all --ipc=host --user root -e PIP_CACHE_DIR=/root/.cache/pip --pull never"
      volumes:
        - /nvme/github-actions/pip-cache:/root/.cache/pip
        - /nvme/github-actions/packages:/root/packages
        - /nvme/qa_test_models:/nvme/qa_test_models
        - /nvme/qa_test_models/datasets/:/nvme/qa_test_models/datasets/
        - /mnt/shared:/mnt/shared
        - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        if: ${{github.event_name == 'schedule' || !inputs.offline_mode}}
        with:
          repository: ${{ github.event.inputs.repo_org || 'InternLM/lmdeploy' }}
          ref: ${{github.event.inputs.repo_ref || 'main'}}
      - name: Copy repository - offline
        if: ${{inputs.offline_mode}}
        run: cp -r /nvme/qa_test_models/offline_pkg/lmdeploy/. .
      - name: Download Artifacts
        if: ${{github.event_name == 'schedule' || !inputs.offline_mode}}
        uses: actions/download-artifact@v4
        with:
          name: my-artifact-${{ github.run_id }}-py310
      - name: Install pytorch
        run: |
          python3 -m pip cache dir
          python3 -m pip install torch==2.2.2 torchvision==0.17.2 --index-url https://download.pytorch.org/whl/cu118
      - name: Install lmdeploy - dependency
        run: |
          # manually install flash attn
          # the install packeage from. https://github.com/Dao-AILab/flash-attention/releases
          python3 -m pip install /root/packages/flash_attn-2.5.7+cu118torch2.2cxx11abiFALSE-cp310-cp310-linux_x86_64.whl
          python3 -m pip install -U 'xformers<=0.0.26' --index-url https://download.pytorch.org/whl/cu118
          python3 -m pip install ${{env.dependency_pkgs}}
      - name: Install lmdeploy
        if: ${{github.event_name == 'schedule' || !inputs.offline_mode}}
        run: |
          python3 -m pip install lmdeploy-*.whl
          python3 -m pip install triton==2.1.0
          python3 -m pip install -r requirements/test.txt
      - name: Install lmdeploy - offline
        if: ${{inputs.offline_mode}}
        run: |
          python3 -m pip install /nvme/qa_test_models/offline_pkg/py310/lmdeploy-*.whl
          python3 -m pip install triton==2.1.0
          python3 -m pip install -r requirements/test.txt
      - name: Check env
        run: |
          python3 -m pip list
          lmdeploy check_env
      - name: Set params
        run: |
          chmod +x .github/scripts/set_benchmark_param.sh
          .github/scripts/set_benchmark_param.sh ${{matrix.model}}
      - name: Start restful api turbomind
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind')
        run: |
          lmdeploy serve api_server $MODEL_PATH $MAX_ENTRY_COUNT $MAX_BATCH_SIZE $MODEL_FORMAT $TP_INFO --log-level ${{inputs.log_level}} > turbomind_run.log 2>&1 &
          echo "restful_pid=$!" >> "$GITHUB_ENV"
          sleep 180s
      - name: Run restful benchmark
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind')
        env:
          result_dir: benchmark-restful-turbomind
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          batches=($BATCHES)
          for batch in ${batches[@]}
          do
            for ((i=1; i<=$LOOP_NUM; i++))
              do
                python3 benchmark/profile_restful_api.py localhost:23333 $MODEL_PATH $DATASET_FILE --concurrency "$batch" --stream-output True --csv ${result_dir}/restful_csv_batch_"${batch}"_"${i}"th.csv &> ${result_dir}/restful_csv_batch_"${batch}"_"${i}"th.log
              done
          done
      - name: Kill restful api turbomind
        continue-on-error: true
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind')
        run: |
          kill -15 "$restful_pid"
      - name: Start restful api turbomind - kvint8
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind') && contains(fromJSON(github.event.inputs.kvint_quantization), 'kvint8')
        run: |
          lmdeploy serve api_server $MODEL_PATH $MAX_ENTRY_COUNT $MAX_BATCH_SIZE $MODEL_FORMAT $TP_INFO --quant-policy 8 --log-level ${{inputs.log_level}} > turbomind_kvint8_run.log 2>&1 &
          echo "restful_pid=$!" >> "$GITHUB_ENV"
          sleep 180s
      - name: Run restful benchmark -kvint8
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind') && contains(fromJSON(github.event.inputs.kvint_quantization), 'kvint8')
        env:
          result_dir: benchmark-restful-turbomind-kvint8
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          batches=($BATCHES)
          for batch in "${batches[@]}"
          do
            for ((i=1; i<=$LOOP_NUM; i++))
              do
                python3 benchmark/profile_restful_api.py localhost:23333 $MODEL_PATH $DATASET_FILE --concurrency "$batch" --stream-output True --csv ${result_dir}/restful_csv_batch_"${batch}"_"${i}"th.csv &> ${result_dir}/restful_csv_batch_"${batch}"_"${i}"th.log
              done
          done
      - name: Kill restful api turbomind - kvint8
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind') && contains(fromJSON(github.event.inputs.kvint_quantization), 'kvint8')
        run: |
          kill -15 "$restful_pid"
      - name: Start restful api turbomind - kvint4
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind') && contains(fromJSON(github.event.inputs.kvint_quantization), 'kvint4')
        run: |
          lmdeploy serve api_server $MODEL_PATH $MAX_ENTRY_COUNT $MAX_BATCH_SIZE $MODEL_FORMAT $TP_INFO --quant-policy 4 --log-level ${{inputs.log_level}} > turbomind_kvint4_run.log 2>&1 &
          echo "restful_pid=$!" >> "$GITHUB_ENV"
          sleep 180s
      - name: Run restful benchmark -kvint4
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind') && contains(fromJSON(github.event.inputs.kvint_quantization), 'kvint4')
        env:
          result_dir: benchmark-restful-turbomind-kvint4
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          batches=($BATCHES)
          for batch in "${batches[@]}"
          do
            for ((i=1; i<=$LOOP_NUM; i++))
              do
                python3 benchmark/profile_restful_api.py localhost:23333 $MODEL_PATH $DATASET_FILE --concurrency "$batch" --stream-output True --csv ${result_dir}/restful_csv_batch_"${batch}"_"${i}"th.csv &> ${result_dir}/restful_csv_batch_"${batch}"_"${i}"th.log
              done
          done
      - name: Kill restful api turbomind - kvint4
        if: contains(fromJSON(github.event.inputs.backend), 'turbomind') && contains(fromJSON(github.event.inputs.kvint_quantization), 'kvint4')
        run: |
          kill -15 "$restful_pid"
      - name: Start restful api pytorch
        if: (!contains(env.MODEL_FORMAT, 'awq') && contains(fromJSON(github.event.inputs.backend), 'pytorch'))
        run: |
          lmdeploy serve api_server $MODEL_PATH $MAX_ENTRY_COUNT $MODEL_FORMAT $TP_INFO --backend pytorch --log-level ${{inputs.log_level}} > pytorch_run.log 2>&1 &
          echo "restful_pid=$!" >> "$GITHUB_ENV"
          sleep 120s
      - name: Run restful benchmark - pytorch
        if: (!contains(env.MODEL_FORMAT, 'awq') && contains(fromJSON(github.event.inputs.backend), 'pytorch'))
        env:
          result_dir: benchmark-restful-pytorch
        run: |
          rm -rf ${result_dir}
          mkdir ${result_dir}
          batches=($BATCHES)
          for batch in "${batches[@]}"
          do
            for ((i=1; i<=$LOOP_NUM; i++))
              do
                python3 benchmark/profile_restful_api.py localhost:23333 $MODEL_PATH $DATASET_FILE --concurrency "$batch" --stream-output True --csv ${result_dir}/restful_csv_batch_"${batch}"_"${i}"th.csv &> ${result_dir}/restful_csv_batch_"${batch}"_"${i}"th.log
              done
          done
      - name: Kill restful api pytorch
        if: (!contains(env.MODEL_FORMAT, 'awq') && contains(fromJSON(github.event.inputs.backend), 'pytorch'))
        run: |
          kill -15 "$restful_pid"
      - name: Save reports
        if: always()
        run: |
          mkdir $REPORT_DIR -p && mkdir $REPORT_DIR/${{matrix.model}} -p && mkdir $REPORT_DIR/${{matrix.model}}/restful -p
          cp -r benchmark-restful-* $REPORT_DIR/${{matrix.model}}/restful && rm -rf benchmark-restful-*
          mv *_run.log $REPORT_DIR/${{matrix.model}}/restful
          chmod -R 777 $REPORT_DIR
          echo 'save report to $REPORT_DIR/${{matrix.model}}/restful'
      - name: Clear workfile
        if: always()
        run: |
          export workdir=$(pwd)
          cd ..
          rm -rf $workdir
          mkdir $workdir
          chmod -R 777 $workdir

  get_result_overview:
    if: always() && !cancelled()
    needs: [generation_benchmark, throughput_benchmark, restful_benchmark]
    timeout-minutes: 5
    runs-on: [self-hosted, linux-a100]
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repo_org || 'InternLM/lmdeploy' }}
          ref: ${{github.event.inputs.repo_ref || 'main'}}
      - name: Get overview
        run: |
          pip install pandas fire mmengine
          python3 .github/scripts/action_tools.py generate_benchmark_report $REPORT_DIR
